name: Node.js CI

on:
  push:
    branches: [ main, master ]  # 在推送到 main/master 分支时触发
  pull_request:
    branches: [ main, master ] # 在针对 main/master 分支的 PR 时触发

jobs:
  build:
    runs-on: ubuntu-latest     # 使用 GitHub 托管的 Ubuntu 最新版运行器
  
    environment: production  # 必须先在仓库设置中创建同名环境
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # 官方代码检出动作

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 22

    # 方法一：推荐使用 corepack（Node.js 16+ 内置）
    - name: Enable corepack (for pnpm)
      run: corepack enable

    # 安装构建工具和依赖
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3 python3-dev
        # 安装Node.js原生模块编译所需的工具
        sudo apt-get install -y libc6-dev

    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile        # 使用 pnpm 安装依赖，允许更新锁文件

    - name: Rebuild native modules
      run: |
        pnpm rebuild better-sqlite3
        pnpm rebuild bindings

    - name: Force rebuild better-sqlite3
      run: |
        # 设置环境变量强制编译
        export npm_config_build_from_source=true
        export npm_config_cache=false
        export npm_config_target_arch=x64
        export npm_config_target_platform=linux
        # 清理并重新编译better-sqlite3
        rm -rf node_modules/.pnpm/better-sqlite3*
        pnpm rebuild better-sqlite3 --force
        # 验证better-sqlite3是否正确安装
        node -e "console.log('Testing better-sqlite3...'); try { const sqlite3 = require('better-sqlite3'); console.log('✅ better-sqlite3 loaded successfully'); } catch(e) { console.log('❌ better-sqlite3 failed:', e.message); process.exit(1); }"

    - name: Generate static site
      run: pnpm run generate   # 生成静态站点
      env:
        NODE_ENV: production
        # 设置构建环境变量确保原生模块正确编译
        npm_config_build_from_source: true
        npm_config_target_arch: x64
        npm_config_target_platform: linux

    # 使用 Cloudflare 官方 Action 处理 API Token 认证
    - name: Deploy with Wrangler (API Token)
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
        command: pages deploy .output/public/ --project-name=blog
      